{"version":3,"sources":["assets/imgae/istockphoto.jpg","assets/imgae/no-profile.png","components/AnswersList.jsx","components/Answer.jsx","components/Chats.jsx","components/Chat.jsx","firebase/config.js","firebase/index.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","AnswersList","props","className","answers","map","value","index","content","nextId","key","select","useStyles","makeStyles","createStyles","button","backgroundColor","borderColor","color","fontWeight","marginBottom","Answer","classes","Button","variant","disableElevation","onClick","chats","height","padding","overflow","Chats","List","id","text","type","Chat","isQuestion","ListItem","alignItems","ListItemAvatar","Avatar","src","Masl","Noimage","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","db","firestore","App","useState","setAnswers","setChats","currentId","setCurrentId","dataset","setDataset","displayNextQuestion","nextQuestionId","nextDataset","addChats","question","chat","prevChats","useEffect","a","initDataset","collection","get","then","snapshots","forEach","doc","data","scrollAre","document","getElementById","scrollTop","scrollHeight","console","log","selectAnswer","test","createElement","href","target","click","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,0PCwB5BC,G,YAlBK,SAACC,GAEnB,OACE,yBAAKC,UAAU,kBACZD,EAAME,QAAQC,KAAI,SAACC,EAAOC,GACxB,OACE,kBAAC,EAAD,CACEC,QAASF,EAAME,QACfC,OAAQH,EAAMG,OACdC,IAAKH,EACLI,OAAQT,EAAMS,e,wBCZrBC,EAAYC,aAAW,kBAC3BC,YAAa,CACXC,OAAQ,CACNC,gBAAiB,UACjBC,YAAa,UACbC,MAAO,SACPC,WAAY,IACZC,aAAc,MACd,UAAW,CACTJ,gBAAiB,SACjBE,MAAO,cAuBAG,EAjBA,SAACnB,GAEd,IAAMoB,EAAUV,IAEhB,OACE,kBAACW,EAAA,EAAD,CACEC,QAAQ,YACRN,MAAM,QACNO,kBAAgB,EAChBC,QAAS,kBAAMxB,EAAMS,OAAOT,EAAMM,QAASN,EAAMO,SACjDN,UAAWmB,EAAQP,QAElBb,EAAMM,U,QC3BPI,EAAYC,aAAW,kBAC3BC,YAAa,CACXa,MAAO,CACLC,OAAQ,QACRC,QAAS,MACTC,SAAU,aAiBDC,EAZD,SAAC7B,GACb,IAAMoB,EAAUV,IAEhB,OACE,kBAACoB,EAAA,EAAD,CAAM7B,UAAWmB,EAAQK,MAAOM,GAAI,cACjC/B,EAAMyB,MAAMtB,KAAI,SAACC,EAAOC,GACvB,OAAO,kBAAC,EAAD,CAAM2B,KAAM5B,EAAM4B,KAAMC,KAAM7B,EAAM6B,KAAMzB,IAAKH,S,0DCK/C6B,EAfF,SAAClC,GACZ,IAAMmC,EAA6B,aAAfnC,EAAMiC,KACpBb,EAAUe,EAAa,cAAgB,kBAG7C,OACE,kBAACC,EAAA,EAAD,CAAUC,WAAW,aAAapC,UAAWmB,GAC3C,kBAACkB,EAAA,EAAD,KACGH,EAAa,kBAACI,EAAA,EAAD,CAAQC,IAAKC,MAAW,kBAACF,EAAA,EAAD,CAAQC,IAAKE,OAErD,yBAAKzC,UAAU,gCAAgCD,EAAMgC,Q,iBCX5CW,G,MAVQ,CACrBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBCJjBC,IAASC,cAAcV,GAChB,IAAMW,EAAKF,IAASG,YCyGZC,EAnGH,WAAO,IAAD,EAEcC,mBAAS,IAFvB,mBAETvD,EAFS,KAEAwD,EAFA,OAGUD,mBAAS,IAHnB,mBAGThC,EAHS,KAGFkC,EAHE,OAIkBF,mBAAS,QAJ3B,mBAITG,EAJS,KAIEC,EAJF,OAKcJ,mBAAS,IALvB,mBAKTK,EALS,KAKAC,EALA,KASVC,EAAsB,SAACC,EAAgBC,GAC3CC,EAAS,CACPnC,KAAMkC,EAAYE,SAClBnC,KAAM,aAGRyB,EAAWQ,EAAYhE,SACvB2D,EAAaI,IAgCTE,EAAW,SAACE,GAChBV,GAAS,SAAAW,GACP,MAAM,GAAN,mBAAUA,GAAV,CAAqBD,QAoCzB,OA/BAE,qBAAU,WACN,sBAAC,4BAAAC,EAAA,6DACOC,EAAc,GADrB,SAEKnB,EACHoB,WAAW,aACXC,MACAC,MAAK,SAACC,GACLA,EAAUC,SAAQ,SAACC,GACjB,IAAMhD,EAAKgD,EAAIhD,GACTiD,EAAOD,EAAIC,OACjBP,EAAY1C,GAAMiD,QATvB,OAaDjB,EAAWU,GAEXT,EAAoBJ,EAAWa,EAAYb,IAf1C,0CAAD,KAiBD,IAIHW,qBAAU,WACN,IAAMU,EAAYC,SAASC,eAAe,cACtCF,IACFA,EAAUG,UAAYH,EAAUI,aAChCC,QAAQC,IAAIN,EAAUG,WACtBE,QAAQC,IAAIN,EAAUI,kBAKxB,6BAASpF,UAAU,aACjB,yBAAKA,UAAU,SACb,kBAAC,EAAD,CAAOwB,MAAOA,IACd,kBAAC,EAAD,CACEvB,QAASA,EACTO,OAzEW,SAAC+E,EAAcvB,GAClC,QAAQ,GACN,IAAwB,SAAnBA,EACHD,EAAoBC,EAAgBH,EAAQG,IAC5C,MAGF,IAAK,WAAWwB,KAAKxB,GACnB,IAAMO,EAAIU,SAASQ,cAAc,KACjClB,EAAEmB,KAAO1B,EACTO,EAAEoB,OAAS,SACXpB,EAAEqB,QACF,MAEF,QACE1B,EAAS,CACLnC,KAAMwD,EACNvD,KAAM,WAIV6D,YAAW,kBAAM9B,EAAoBC,EAAgBH,EAAQG,MAAkB,YCvCnE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpB,SAASC,eAAe,SDwHpB,kBAAmBoB,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.e21eb533.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/istockphoto.d99538ee.jpg\";","module.exports = __webpack_public_path__ + \"static/media/no-profile.a990286c.png\";","import React from 'react';\nimport {Answer} from './index'\n\n\n// 関数コンポーネントで作成する\n\nconst AnswersList = (props)=>{\n\n  return (\n    <div className=\"c-grid__answer\">\n      {props.answers.map((value, index) => {\n         return (\n           <Answer\n             content={value.content}\n             nextId={value.nextId}\n             key={index}\n             select={props.select}\n           />\n         );\n      })}\n    </div>\n  );\n}\n\nexport default AnswersList","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    button: {\n      backgroundColor: \"#FFFFFF\",\n      borderColor: \"#FFB549\",\n      color: \"FFB549\",\n      fontWeight: 600,\n      marginBottom: \"8px\",\n      \"&:hover\": {\n        backgroundColor: \"FFB549\",\n        color: \"#fff\",\n      },\n    },\n  })\n);\n\nconst Answer = (props) => {\n\n  const classes = useStyles();\n\n  return (\n    <Button\n      variant=\"contained\"\n      color=\"light\"\n      disableElevation\n      onClick={() => props.select(props.content, props.nextId)}\n      className={classes.button}\n    >\n      {props.content}\n    </Button>\n  );\n}\n\nexport default Answer","import React from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport {Chat} from './index'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    chats: {\n      height: \"400px\",\n      padding: \"0px\",\n      overflow: \"auto\",\n    },\n  })\n);\n\nconst Chats = (props) => {\n  const classes = useStyles();\n\n  return (\n    <List className={classes.chats} id={\"scrollarea\"}>\n      {props.chats.map((value, index)=>{\n        return <Chat text={value.text} type={value.type} key={index} />\n      })}\n    </List>\n  );\n}\n\nexport default Chats","import React from \"react\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Masl from '../assets/imgae/istockphoto.jpg'\nimport Noimage from '../assets/imgae/no-profile.png'\n\n\n\n\n\nconst Chat = (props) => {\n  const isQuestion = (props.type === \"question\"); // questionかanswerかの判別\n  const classes = isQuestion ? \"p-chat__row\" : \"p-chat__reverse\"\n\n\n  return (\n    <ListItem alignItems=\"flex-start\" className={classes}>\n      <ListItemAvatar>\n        {isQuestion ? <Avatar src={Masl} /> : <Avatar src={Noimage} />}\n      </ListItemAvatar>\n      <div className=\"p-chat__bubble chat__reverse\">{props.text}</div>\n    </ListItem>\n  );\n};\n\nexport default Chat;\n","const firebaseConfig = {\n  apiKey: \"AIzaSyCrRzKMIYCyD4UOpk9IUjCaOxP50lJULPg\",\n  authDomain: \"training-chat-a4112.firebaseapp.com\",\n  databaseURL: \"https://training-chat-a4112.firebaseio.com\",\n  projectId: \"training-chat-a4112\",\n  storageBucket: \"training-chat-a4112.appspot.com\",\n  messagingSenderId: \"721688851550\",\n  appId: \"1:721688851550:web:921cab56e80582020970cf\",\n  measurementId: \"G-R4LB7S6GW6\",\n};\nexport default firebaseConfig;\n","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport firebaseConfig from \"./config.js\"; // firebaseの設定\n\nfirebase.initializeApp(firebaseConfig); //データベースへの接続を行っている\nexport const db = firebase.firestore(); //インスタンス化する\n","\nimport React, {useState, useEffect, useCallback} from 'react';\nimport './App.css';\nimport './assets/styles/style.css';\nimport {AnswersList, Chats} from \"./components/index\"\n// import defaultDataset from \"./dataset\" \n//データベースの値をこちらでインポートする\nimport { db } from \"./firebase/index\";\n\n\n\nconst App = () => {\n\n  const [answers, setAnswers] = useState([]);\n  const [chats, setChats] = useState([]);\n  const [currentId, setCurrentId] = useState(\"init\");\n  const [dataset, setDataset] = useState({});\n\n\n \n  const displayNextQuestion = (nextQuestionId, nextDataset) => {\n    addChats({\n      text: nextDataset.question,\n      type: \"question\",\n    }\n    )\n    setAnswers(nextDataset.answers)\n    setCurrentId(nextQuestionId)\n  };\n\n  const selectAnswer = (selectAnswer, nextQuestionId) => {\n    switch (true) {\n      case nextQuestionId === \"init\":\n        displayNextQuestion(nextQuestionId, dataset[nextQuestionId]);\n        break;\n\n      // urlできた場合の実装\n      case /^https:*/.test(nextQuestionId):\n        const a = document.createElement(\"a\");\n        a.href = nextQuestionId;\n        a.target = \"_blank\";\n        a.click();\n        break;\n\n      default:\n        addChats({\n            text: selectAnswer,\n            type: \"answer\"\n        })\n        // 遅延時間を使って回答するようにする(2つの引数を取れる)\n\n        setTimeout(() => displayNextQuestion(nextQuestionId, dataset[nextQuestionId]), 700);\n\n        break;\n    }\n  };\n\n  // chatに値を追加するメソット\n\n  const addChats = (chat)=>{\n    setChats(prevChats=>{\n      return[...prevChats, chat]\n    })\n  }\n\n\n  useEffect(()=>{\n      (async () => {\n        const initDataset = {};\n      await db\n        .collection(\"questions\")\n        .get()\n        .then((snapshots) => {\n          snapshots.forEach((doc) => {\n            const id = doc.id;\n            const data = doc.data();\n            initDataset[id] = data;\n          });\n        });\n      // setDatasetで先ほどの上記の値を変更する\n      setDataset(initDataset);\n      // 以下では質問を追加する実装を施す\n      displayNextQuestion(currentId, initDataset[currentId])\n    })();\n  }, [])\n\n  // スクロール時の挙動\n\n  useEffect(()=>{\n      const scrollAre = document.getElementById(\"scrollarea\");\n      if (scrollAre) {\n        scrollAre.scrollTop = scrollAre.scrollHeight;\n        console.log(scrollAre.scrollTop);\n        console.log(scrollAre.scrollHeight);\n      }\n  })\n\n  return (\n      <section className=\"c-section\">\n        <div className=\"c-box\">\n          <Chats chats={chats} />\n          <AnswersList\n            answers={answers}\n            select={selectAnswer}\n          />\n        </div>\n      </section>\n    );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/styles/index.css'\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}