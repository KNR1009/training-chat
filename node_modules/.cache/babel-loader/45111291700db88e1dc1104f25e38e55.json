{"ast":null,"code":"var _jsxFileName = \"/Users/itoukazunari/Desktop/React/training-chat/src/App.jsx\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport './assets/styles/style.css';\nimport { AnswersList, Chats } from \"./components/index\"; // firestoreのデータベースを保存する\n\nimport { db } from \"./firebase/\"; // 関数コンポーネントで作成する\n\nconst App = () => {\n  const [answers, serAnswers] = useState([]); // 回答を表示するコンポーネント\n\n  const [chats, setChats] = useState([]); //  チャットに表示するコンポーネント\n\n  const [currentID, setCurrentId] = useState(\"init\"); //現在の質問ID\n\n  const [dataset, setDataset] = useState({}); //質問と回答のデータセット\n\n  const [open, setOpen] = useState(false); //お問い合わせフォームのモーダル\n\n  displayNextQuestion = nextQuestionId => {\n    const chats = this.state.chats;\n    chats.push({\n      text: this.state.dataset[nextQuestionId].question,\n      type: \"question\"\n    });\n    this.setState({\n      answers: this.state.dataset[nextQuestionId].answers,\n      chats: chats,\n      currentID: nextQuestionId\n    });\n  };\n\n  selectAnswer = (selectAnswer, nextQuestionId) => {\n    switch (true) {\n      case nextQuestionId === \"init\":\n        this.displayNextQuestion(nextQuestionId);\n        break;\n      // urlできた場合の実装\n\n      case /^https:*/.test(nextQuestionId):\n        const a = document.createElement(\"a\");\n        a.href = nextQuestionId;\n        a.target = \"_blank\";\n        a.click();\n      // contactだった場合にもーだるウィ開く\n\n      case nextQuestionId === \"contact\":\n        this.handleClickOpen();\n        break;\n\n      default:\n        const chat = {\n          text: selectAnswer,\n          type: \"answer\"\n        };\n        const chats = this.state.chats;\n        chats.push(chat);\n        this.setState({\n          chats: chats\n        }); // 遅延時間を使って回答するようにする(2つの引数を取れる)\n\n        setTimeout(() => this.displayNextQuestion(nextQuestionId), 500);\n        break;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"c-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"c-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Chats, {\n    chats: chats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(AnswersList, {\n    answers: answers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/React/training-chat/src/App.jsx"],"names":["React","useState","useEffect","useCallback","AnswersList","Chats","db","App","answers","serAnswers","chats","setChats","currentID","setCurrentId","dataset","setDataset","open","setOpen","displayNextQuestion","nextQuestionId","state","push","text","question","type","setState","selectAnswer","test","a","document","createElement","href","target","click","handleClickOpen","chat","setTimeout"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,WAApC,QAAsD,OAAtD;AACA,OAAO,WAAP;AACA,OAAO,2BAAP;AACA,SAAQC,WAAR,EAAqBC,KAArB,QAAiC,oBAAjC,C,CACA;;AACA,SAAQC,EAAR,QAAiB,aAAjB,C,CAEA;;AACA,MAAMC,GAAG,GAAG,MAAI;AACZ,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC,CADY,CACgC;;AAC5C,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC,CAFY,CAE6B;;AACzC,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,MAAD,CAA1C,CAHY,CAGwC;;AACpD,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC,CAJY,CAIgC;;AAC5C,QAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,KAAD,CAAhC,CALY,CAK6B;;AAEzCiB,EAAAA,mBAAmB,GAAIC,cAAD,IAAoB;AACxC,UAAMT,KAAK,GAAG,KAAKU,KAAL,CAAWV,KAAzB;AACAA,IAAAA,KAAK,CAACW,IAAN,CAAW;AACTC,MAAAA,IAAI,EAAE,KAAKF,KAAL,CAAWN,OAAX,CAAmBK,cAAnB,EAAmCI,QADhC;AAETC,MAAAA,IAAI,EAAE;AAFG,KAAX;AAKA,SAAKC,QAAL,CAAc;AACZjB,MAAAA,OAAO,EAAE,KAAKY,KAAL,CAAWN,OAAX,CAAmBK,cAAnB,EAAmCX,OADhC;AAEZE,MAAAA,KAAK,EAAEA,KAFK;AAGZE,MAAAA,SAAS,EAAEO;AAHC,KAAd;AAKD,GAZD;;AAcAO,EAAAA,YAAY,GAAG,CAACA,YAAD,EAAeP,cAAf,KAAkC;AAC/C,YAAQ,IAAR;AACE,WAAKA,cAAc,KAAK,MAAxB;AACE,aAAKD,mBAAL,CAAyBC,cAAzB;AACA;AACF;;AACA,WAAK,WAAWQ,IAAX,CAAgBR,cAAhB,CAAL;AACE,cAAMS,CAAC,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAV;AACAF,QAAAA,CAAC,CAACG,IAAF,GAASZ,cAAT;AACAS,QAAAA,CAAC,CAACI,MAAF,GAAW,QAAX;AACAJ,QAAAA,CAAC,CAACK,KAAF;AAEF;;AACA,WAAKd,cAAc,KAAK,SAAxB;AACE,aAAKe,eAAL;AACA;;AAEF;AACE,cAAMC,IAAI,GAAG;AACXb,UAAAA,IAAI,EAAEI,YADK;AAEXF,UAAAA,IAAI,EAAE;AAFK,SAAb;AAKA,cAAMd,KAAK,GAAG,KAAKU,KAAL,CAAWV,KAAzB;AACAA,QAAAA,KAAK,CAACW,IAAN,CAAWc,IAAX;AAEA,aAAKV,QAAL,CAAc;AACZf,UAAAA,KAAK,EAAEA;AADK,SAAd,EATF,CAYE;;AACA0B,QAAAA,UAAU,CAAC,MAAM,KAAKlB,mBAAL,CAAyBC,cAAzB,CAAP,EAAiD,GAAjD,CAAV;AAEA;AA/BJ;AAiCD,GAlCD;;AAqCA,sBACI;AAAS,IAAA,SAAS,EAAC,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAET,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEF,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,CADJ;AAQH,CAlED;;AAqEA,eAAeD,GAAf","sourcesContent":["import React, {useState, useEffect, useCallback} from 'react';\nimport './App.css';\nimport './assets/styles/style.css';\nimport {AnswersList, Chats} from \"./components/index\"\n// firestoreのデータベースを保存する\nimport {db} from \"./firebase/\"\n\n// 関数コンポーネントで作成する\nconst App = ()=>{\n    const [answers, serAnswers] = useState([]); // 回答を表示するコンポーネント\n    const [chats, setChats] = useState([]);  //  チャットに表示するコンポーネント\n    const [currentID, setCurrentId] = useState(\"init\"); //現在の質問ID\n    const [dataset, setDataset] = useState({}); //質問と回答のデータセット\n    const [open, setOpen] = useState(false); //お問い合わせフォームのモーダル\n\n    displayNextQuestion = (nextQuestionId) => {\n      const chats = this.state.chats;\n      chats.push({\n        text: this.state.dataset[nextQuestionId].question,\n        type: \"question\",\n      });\n\n      this.setState({\n        answers: this.state.dataset[nextQuestionId].answers,\n        chats: chats,\n        currentID: nextQuestionId,\n      });\n    };\n\n    selectAnswer = (selectAnswer, nextQuestionId) => {\n      switch (true) {\n        case nextQuestionId === \"init\":\n          this.displayNextQuestion(nextQuestionId);\n          break;\n        // urlできた場合の実装\n        case /^https:*/.test(nextQuestionId):\n          const a = document.createElement(\"a\");\n          a.href = nextQuestionId;\n          a.target = \"_blank\";\n          a.click();\n\n        // contactだった場合にもーだるウィ開く\n        case nextQuestionId === \"contact\":\n          this.handleClickOpen();\n          break;\n\n        default:\n          const chat = {\n            text: selectAnswer,\n            type: \"answer\",\n          };\n\n          const chats = this.state.chats;\n          chats.push(chat);\n\n          this.setState({\n            chats: chats,\n          });\n          // 遅延時間を使って回答するようにする(2つの引数を取れる)\n          setTimeout(() => this.displayNextQuestion(nextQuestionId), 500);\n\n          break;\n      }\n    };\n\n\n    return(\n        <section className=\"c-section\">\n            <div className=\"c-box\">      \n                <Chats chats={chats}/>   \n                <AnswersList answers={answers}/>          \n            </div>\n        </section>\n    )\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}