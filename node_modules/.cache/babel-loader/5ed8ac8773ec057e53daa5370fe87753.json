{"ast":null,"code":"var _jsxFileName = \"/Users/itoukazunari/Desktop/React/training-chat/src/App.jsx\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport './assets/styles/style.css';\nimport { AnswersList, Chats } from \"./components/index\"; // import defaultDataset from \"./dataset\" \n//データベースの値をこちらでインポートする\n\nimport { db } from \"./firebase/index\";\n\nconst App = () => {\n  const [answers, setAnswers] = useState([]);\n  const [chats, setChats] = useState([]);\n  const [currentId, setCurrentId] = useState(\"init\");\n  const [dataset, setDataset] = useState({});\n  const [open, setOpen] = useState(false);\n\n  const displayNextQuestion = (nextQuestionId, nextDataset) => {\n    addChats({\n      text: nextDataset.question,\n      type: \"question\"\n    });\n    setAnswers(nextDataset.answers);\n    setCurrentId(nextQuestionId);\n  };\n\n  const selectAnswer = (selectAnswer, nextQuestionId) => {\n    switch (true) {\n      case nextQuestionId === \"init\":\n        displayNextQuestion(nextQuestionId, dataset[nextQuestionId]);\n        break;\n      // urlできた場合の実装\n\n      case /^https:*/.test(nextQuestionId):\n        const a = document.createElement(\"a\");\n        a.href = nextQuestionId;\n        a.target = \"_blank\";\n        a.click();\n        break;\n\n      default:\n        addChats({\n          text: selectAnswer,\n          type: \"answer\"\n        }); // 遅延時間を使って回答するようにする(2つの引数を取れる)\n\n        setTimeout(() => displayNextQuestion(nextQuestionId, dataset[nextQuestionId]), 1000);\n        break;\n    }\n  }; // chatに値を追加するメソット\n\n\n  const addChats = chat => {\n    setChats(prevChats => {\n      return [...prevChats, chat];\n    });\n  };\n\n  useEffect(() => {\n    (async () => {\n      const initDataset = {};\n      await db.collection(\"questions\").get().then(snapshots => {\n        snapshots.forEach(doc => {\n          const id = doc.id;\n          const data = doc.data();\n          initDataset[id] = data;\n        });\n      }); // setDatasetで先ほどの上記の値を変更する\n\n      setDataset(initDataset); // 以下では質問を追加する実装を施す\n\n      displayNextQuestion(currentId, initDataset[currentId]);\n    })();\n  }, []); // スクロール時の挙動\n\n  useEffect(() => {\n    const scrollAre = document.getElementById(\"scrollarea\");\n\n    if (scrollAre) {\n      scrollAre.scrollTop = scrollAre.scrollHeight;\n      console.log(scrollAre.scrollTop);\n      console.log(scrollAre.scrollHeight);\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"c-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"c-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Chats, {\n    chats: chats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(AnswersList, {\n    answers: answers,\n    select: selectAnswer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/React/training-chat/src/App.jsx"],"names":["React","useState","useEffect","useCallback","AnswersList","Chats","db","App","answers","setAnswers","chats","setChats","currentId","setCurrentId","dataset","setDataset","open","setOpen","displayNextQuestion","nextQuestionId","nextDataset","addChats","text","question","type","selectAnswer","test","a","document","createElement","href","target","click","setTimeout","chat","prevChats","initDataset","collection","get","then","snapshots","forEach","doc","id","data","scrollAre","getElementById","scrollTop","scrollHeight","console","log"],"mappings":"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","sourcesContent":["\nimport React, {useState, useEffect, useCallback} from 'react';\nimport './App.css';\nimport './assets/styles/style.css';\nimport {AnswersList, Chats} from \"./components/index\"\n// import defaultDataset from \"./dataset\" \n//データベースの値をこちらでインポートする\nimport { db } from \"./firebase/index\";\n\n\n\nconst App = () => {\n\n  const [answers, setAnswers] = useState([]);\n  const [chats, setChats] = useState([]);\n  const [currentId, setCurrentId] = useState(\"init\");\n  const [dataset, setDataset] = useState({});\n  const [open, setOpen] = useState(false);\n\n\n \n  const displayNextQuestion = (nextQuestionId, nextDataset) => {\n    addChats({\n      text: nextDataset.question,\n      type: \"question\",\n    }\n    )\n    setAnswers(nextDataset.answers)\n    setCurrentId(nextQuestionId)\n  \n  };\n\n  const selectAnswer = (selectAnswer, nextQuestionId) => {\n    switch (true) {\n      case nextQuestionId === \"init\":\n        displayNextQuestion(nextQuestionId, dataset[nextQuestionId]);\n        break;\n\n      // urlできた場合の実装\n      case /^https:*/.test(nextQuestionId):\n        const a = document.createElement(\"a\");\n        a.href = nextQuestionId;\n        a.target = \"_blank\";\n        a.click();\n        break;\n\n      default:\n        addChats({\n            text: selectAnswer,\n            type: \"answer\"\n        })\n        // 遅延時間を使って回答するようにする(2つの引数を取れる)\n\n        setTimeout(() => displayNextQuestion(nextQuestionId, dataset[nextQuestionId]), 1000);\n\n        break;\n    }\n  };\n\n  // chatに値を追加するメソット\n\n  const addChats = (chat)=>{\n    setChats(prevChats=>{\n      return[...prevChats, chat]\n    })\n  }\n\n\n  useEffect(()=>{\n      (async () => {\n        const initDataset = {};\n      await db\n        .collection(\"questions\")\n        .get()\n        .then((snapshots) => {\n          snapshots.forEach((doc) => {\n            const id = doc.id;\n            const data = doc.data();\n            initDataset[id] = data;\n          });\n        });\n      // setDatasetで先ほどの上記の値を変更する\n      setDataset(initDataset);\n      // 以下では質問を追加する実装を施す\n      displayNextQuestion(currentId, initDataset[currentId])\n    })();\n  }, [])\n\n  // スクロール時の挙動\n\n  useEffect(()=>{\n      const scrollAre = document.getElementById(\"scrollarea\");\n      if (scrollAre) {\n        scrollAre.scrollTop = scrollAre.scrollHeight;\n        console.log(scrollAre.scrollTop);\n        console.log(scrollAre.scrollHeight);\n      }\n  })\n\n  return (\n      <section className=\"c-section\">\n        <div className=\"c-box\">\n          <Chats chats={chats} />\n          <AnswersList\n            answers={answers}\n            select={selectAnswer}\n          />\n        </div>\n      </section>\n    );\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}