{"ast":null,"code":"var _jsxFileName = \"/Users/itoukazunari/Desktop/React/training-chat/src/App.jsx\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport \"./assets/styles/style.css\";\nimport { db } from \"./firebase/index\";\nimport { AnswersList, Chats, Loading } from \"./components/index\";\nimport { FormDialog } from \"./components/Forms/index\";\n\nconst App = () => {\n  const [answers, setAnswers] = useState([]); // 回答コンポーネントに表示するデータ\n\n  const [chats, setChats] = useState([]); // チャットコンポーネントに表示するデータ\n\n  const [currentId, setCurrentId] = useState(\"init\"); // 現在の質問ID\n\n  const [dataset, setDataset] = useState({}); // 質問と回答のデータセット\n\n  const [open, setOpen] = useState(false); // 問い合わせフォーム用モーダルの開閉を管理\n  // 問い合わせフォーム用モーダルを開くCallback関数\n\n  const handleOpen = useCallback(() => {\n    setOpen(true);\n  }, [setOpen]); // 問い合わせフォーム用モーダルを閉じるCallback関数\n\n  const handleClose = useCallback(() => {\n    setOpen(false);\n  }, [setOpen]); // 新しいチャットを追加するCallback関数\n\n  const addChats = useCallback(chat => {\n    setChats(prevChats => {\n      return [...prevChats, chat];\n    });\n  }, [setChats]); // 次の質問をチャットエリアに表示する関数\n\n  const displayNextQuestion = (nextQuestionId, nextDataset) => {\n    // 選択された回答と次の質問をチャットに追加\n    addChats({\n      text: nextDataset.question,\n      type: \"question\"\n    }); // 次の回答一覧をセット\n\n    setAnswers(nextDataset.answers); // 現在の質問IDをセット\n\n    setCurrentId(nextQuestionId);\n  }; // 回答が選択された時に呼ばれる関数\n\n\n  const selectAnswer = useCallback((selectedAnswer, nextQuestionId) => {\n    switch (true) {\n      // お問い合わせが選択された場合\n      case nextQuestionId === \"contact\":\n        handleOpen();\n        break;\n      // リンクが選択された時\n\n      case /^https:*/.test(nextQuestionId):\n        const a = document.createElement(\"a\");\n        a.href = nextQuestionId;\n        a.target = \"_blank\";\n        a.click();\n        break;\n      // 選択された回答をchatsに追加\n\n      default:\n        // 現在のチャット一覧を取得\n        addChats({\n          text: selectedAnswer,\n          type: \"answer\"\n        });\n        setTimeout(() => displayNextQuestion(nextQuestionId, dataset[nextQuestionId]), 750);\n        break;\n    }\n  }, [answers]); // 最初の質問をチャットエリアに表示する\n\n  useEffect(() => {\n    (async () => {\n      const initDataset = {}; // Fetch questions dataset from Firestore\n\n      await db.collection(\"questions\").get().then(snapshots => {\n        snapshots.forEach(doc => {\n          initDataset[doc.id] = doc.data();\n        });\n      }); // Firestoreから取得したデータセットを反映\n\n      setDataset(initDataset); // 最初の質問を表示\n\n      displayNextQuestion(currentId, initDataset[currentId]);\n    })();\n  }, []); // 最新のチャットが見えるように、スクロール位置の頂点をスクロール領域の最下部に設定する\n\n  useEffect(() => {\n    const scrollArea = document.getElementById(\"scroll-area\");\n\n    if (scrollArea) {\n      scrollArea.scrollTop = scrollArea.scrollHeight;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"c-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"c-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, Object.keys(dataset).length === 0 ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Chats, {\n    chats: chats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(AnswersList, {\n    answers: answers,\n    select: selectAnswer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(FormDialog, {\n    open: open,\n    handleOpen: handleOpen,\n    handleClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/React/training-chat/src/App.jsx"],"names":["React","useState","useCallback","useEffect","db","AnswersList","Chats","Loading","FormDialog","App","answers","setAnswers","chats","setChats","currentId","setCurrentId","dataset","setDataset","open","setOpen","handleOpen","handleClose","addChats","chat","prevChats","displayNextQuestion","nextQuestionId","nextDataset","text","question","type","selectAnswer","selectedAnswer","test","a","document","createElement","href","target","click","setTimeout","initDataset","collection","get","then","snapshots","forEach","doc","id","data","scrollArea","getElementById","scrollTop","scrollHeight","Object","keys","length"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport \"./assets/styles/style.css\";\nimport { db } from \"./firebase/index\";\nimport { AnswersList, Chats, Loading } from \"./components/index\";\nimport { FormDialog } from \"./components/Forms/index\";\n\nconst App = () => {\n  const [answers, setAnswers] = useState([]); // 回答コンポーネントに表示するデータ\n  const [chats, setChats] = useState([]); // チャットコンポーネントに表示するデータ\n  const [currentId, setCurrentId] = useState(\"init\"); // 現在の質問ID\n  const [dataset, setDataset] = useState({}); // 質問と回答のデータセット\n  const [open, setOpen] = useState(false); // 問い合わせフォーム用モーダルの開閉を管理\n\n  // 問い合わせフォーム用モーダルを開くCallback関数\n  const handleOpen = useCallback(() => {\n    setOpen(true);\n  }, [setOpen]);\n\n  // 問い合わせフォーム用モーダルを閉じるCallback関数\n  const handleClose = useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  // 新しいチャットを追加するCallback関数\n  const addChats = useCallback(\n    (chat) => {\n      setChats((prevChats) => {\n        return [...prevChats, chat];\n      });\n    },\n    [setChats]\n  );\n\n  // 次の質問をチャットエリアに表示する関数\n  const displayNextQuestion = (nextQuestionId, nextDataset) => {\n    // 選択された回答と次の質問をチャットに追加\n    addChats({\n      text: nextDataset.question,\n      type: \"question\",\n    });\n\n    // 次の回答一覧をセット\n    setAnswers(nextDataset.answers);\n\n    // 現在の質問IDをセット\n    setCurrentId(nextQuestionId);\n  };\n\n  // 回答が選択された時に呼ばれる関数\n  const selectAnswer = useCallback(\n    (selectedAnswer, nextQuestionId) => {\n      switch (true) {\n        // お問い合わせが選択された場合\n        case nextQuestionId === \"contact\":\n          handleOpen();\n          break;\n\n        // リンクが選択された時\n        case /^https:*/.test(nextQuestionId):\n          const a = document.createElement(\"a\");\n          a.href = nextQuestionId;\n          a.target = \"_blank\";\n          a.click();\n          break;\n\n        // 選択された回答をchatsに追加\n        default:\n          // 現在のチャット一覧を取得\n          addChats({\n            text: selectedAnswer,\n            type: \"answer\",\n          });\n\n          setTimeout(\n            () => displayNextQuestion(nextQuestionId, dataset[nextQuestionId]),\n            750\n          );\n          break;\n      }\n    },\n    [answers]\n  );\n\n  // 最初の質問をチャットエリアに表示する\n  useEffect(() => {\n    (async () => {\n      const initDataset = {};\n\n      // Fetch questions dataset from Firestore\n      await db\n        .collection(\"questions\")\n        .get()\n        .then((snapshots) => {\n          snapshots.forEach((doc) => {\n            initDataset[doc.id] = doc.data();\n          });\n        });\n\n      // Firestoreから取得したデータセットを反映\n      setDataset(initDataset);\n\n      // 最初の質問を表示\n      displayNextQuestion(currentId, initDataset[currentId]);\n    })();\n  }, []);\n\n  // 最新のチャットが見えるように、スクロール位置の頂点をスクロール領域の最下部に設定する\n  useEffect(() => {\n    const scrollArea = document.getElementById(\"scroll-area\");\n    if (scrollArea) {\n      scrollArea.scrollTop = scrollArea.scrollHeight;\n    }\n  });\n\n  return (\n    <section className=\"c-section\">\n      <div className=\"c-box\">\n        {Object.keys(dataset).length === 0 ? (\n          <Loading />\n        ) : (\n          <>\n            <Chats chats={chats} />\n            <AnswersList answers={answers} select={selectAnswer} />\n          </>\n        )}\n        <FormDialog\n          open={open}\n          handleOpen={handleOpen}\n          handleClose={handleClose}\n        />\n      </div>\n    </section>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}