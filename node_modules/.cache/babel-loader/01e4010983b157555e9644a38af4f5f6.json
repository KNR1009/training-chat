{"ast":null,"code":"var _jsxFileName = \"/Users/itoukazunari/Desktop/React/training-chat/src/App.jsx\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport './assets/styles/style.css';\nimport { db } from './firebase/index';\nimport { AnswersList, Chats, Loading } from './components/index';\nimport { FormDialog } from \"./components/Forms/index\";\n\nconst App = () => {\n  const [answers, setAnswers] = useState([]); // 回答コンポーネントに表示するデータ\n\n  const [chats, setChats] = useState([]); // チャットコンポーネントに表示するデータ\n\n  const [currentId, setCurrentId] = useState('init'); // 現在の質問ID\n\n  const [dataset, setDataset] = useState({}); // 質問と回答のデータセット\n\n  const [open, setOpen] = useState(false); // 問い合わせフォーム用モーダルの開閉を管理\n  // 問い合わせフォーム用モーダルを開くCallback関数\n\n  const handleOpen = useCallback(() => {\n    setOpen(true);\n  }, [setOpen]); // 問い合わせフォーム用モーダルを閉じるCallback関数\n\n  const handleClose = useCallback(() => {\n    setOpen(false);\n  }, [setOpen]); // 新しいチャットを追加するCallback関数\n\n  const addChats = useCallback(chat => {\n    setChats(prevChats => {\n      return [...prevChats, chat];\n    });\n  }, [setChats]); // 次の質問をチャットエリアに表示する関数\n\n  const displayNextQuestion = (nextQuestionId, nextDataset) => {\n    // 選択された回答と次の質問をチャットに追加\n    addChats({\n      text: nextDataset.question,\n      type: 'question'\n    }); // 次の回答一覧をセット\n\n    setAnswers(nextDataset.answers); // 現在の質問IDをセット\n\n    setCurrentId(nextQuestionId);\n  }; // 回答が選択された時に呼ばれる関数\n\n\n  const selectAnswer = useCallback((selectedAnswer, nextQuestionId) => {\n    switch (true) {\n      // お問い合わせが選択された場合\n      case nextQuestionId === 'contact':\n        handleOpen();\n        break;\n      // リンクが選択された時\n\n      case /^https:*/.test(nextQuestionId):\n        const a = document.createElement('a');\n        a.href = nextQuestionId;\n        a.target = '_blank';\n        a.click();\n        break;\n      // 選択された回答をchatsに追加\n\n      default:\n        // 現在のチャット一覧を取得\n        addChats({\n          text: selectedAnswer,\n          type: 'answer'\n        });\n        setTimeout(() => displayNextQuestion(nextQuestionId, dataset[nextQuestionId]), 750);\n        break;\n    }\n  }, [answers]); // 最初の質問をチャットエリアに表示する\n\n  useEffect(() => {\n    (async () => {\n      const initDataset = {}; // Fetch questions dataset from Firestore\n\n      await db.collection('questions').get().then(snapshots => {\n        snapshots.forEach(doc => {\n          initDataset[doc.id] = doc.data();\n        });\n      }); // Firestoreから取得したデータセットを反映\n\n      setDataset(initDataset); // 最初の質問を表示\n\n      displayNextQuestion(currentId, initDataset[currentId]);\n    })();\n  }, []); // 最新のチャットが見えるように、スクロール位置の頂点をスクロール領域の最下部に設定する\n\n  useEffect(() => {\n    const scrollArea = document.getElementById('scroll-area');\n\n    if (scrollArea) {\n      scrollArea.scrollTop = scrollArea.scrollHeight;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"c-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"c-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, Object.keys(dataset).length === 0 ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Chats, {\n    chats: chats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(AnswersList, {\n    answers: answers,\n    select: selectAnswer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(FormDialog, {\n    open: open,\n    handleOpen: handleOpen,\n    handleClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/React/training-chat/src/App.jsx"],"names":["React","useState","useCallback","useEffect","db","AnswersList","Chats","Loading","FormDialog","App","answers","setAnswers","chats","setChats","currentId","setCurrentId","dataset","setDataset","open","setOpen","handleOpen","handleClose","addChats","chat","prevChats","displayNextQuestion","nextQuestionId","nextDataset","text","question","type","selectAnswer","selectedAnswer","test","a","document","createElement","href","target","click","setTimeout","initDataset","collection","get","then","snapshots","forEach","doc","id","data","scrollArea","getElementById","scrollTop","scrollHeight","Object","keys","length"],"mappings":"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","sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\nimport './assets/styles/style.css'\nimport {db} from './firebase/index'\nimport {AnswersList, Chats, Loading} from './components/index'\nimport {FormDialog} from \"./components/Forms/index\";\n\nconst App = () => {\n    const [answers, setAnswers] = useState([]);            // 回答コンポーネントに表示するデータ\n    const [chats, setChats] = useState([]);                // チャットコンポーネントに表示するデータ\n    const [currentId, setCurrentId] = useState('init');    // 現在の質問ID\n    const [dataset, setDataset] = useState({});            // 質問と回答のデータセット\n    const [open, setOpen] = useState(false);               // 問い合わせフォーム用モーダルの開閉を管理\n\n    // 問い合わせフォーム用モーダルを開くCallback関数\n    const handleOpen = useCallback(() => {\n        setOpen(true)\n    },[setOpen]);\n\n    // 問い合わせフォーム用モーダルを閉じるCallback関数\n    const handleClose = useCallback(() => {\n        setOpen(false)\n    },[setOpen]);\n\n    // 新しいチャットを追加するCallback関数\n    const addChats = useCallback((chat) => {\n        setChats(prevChats => {\n            return [...prevChats, chat]\n        })\n    },[setChats]);\n\n    // 次の質問をチャットエリアに表示する関数\n    const displayNextQuestion = (nextQuestionId, nextDataset) => {\n        // 選択された回答と次の質問をチャットに追加\n        addChats({\n            text: nextDataset.question,\n            type: 'question'\n        });\n\n        // 次の回答一覧をセット\n        setAnswers(nextDataset.answers)\n\n        // 現在の質問IDをセット\n        setCurrentId(nextQuestionId)\n    }\n\n    // 回答が選択された時に呼ばれる関数\n    const selectAnswer = useCallback((selectedAnswer, nextQuestionId) => {\n        switch (true) {\n            // お問い合わせが選択された場合\n            case (nextQuestionId === 'contact'):\n                handleOpen();\n                break;\n\n            // リンクが選択された時\n            case /^https:*/.test(nextQuestionId):\n                const a = document.createElement('a');\n                a.href = nextQuestionId;\n                a.target = '_blank';\n                a.click();\n                break;\n\n            // 選択された回答をchatsに追加\n            default:\n                // 現在のチャット一覧を取得\n                addChats({\n                    text: selectedAnswer,\n                    type: 'answer'\n                })\n\n                setTimeout(() => displayNextQuestion(nextQuestionId, dataset[nextQuestionId]), 750)\n                break;\n        }\n    },[answers]);\n\n    // 最初の質問をチャットエリアに表示する\n    useEffect(() => {\n        (async() => {\n            const initDataset = {};\n\n            // Fetch questions dataset from Firestore\n            await db.collection('questions').get().then(snapshots => {\n                snapshots.forEach(doc => {\n                    initDataset[doc.id] = doc.data()\n                })\n            });\n\n            // Firestoreから取得したデータセットを反映\n            setDataset(initDataset);\n\n            // 最初の質問を表示\n            displayNextQuestion(currentId, initDataset[currentId])\n        })();\n    }, []);\n\n    // 最新のチャットが見えるように、スクロール位置の頂点をスクロール領域の最下部に設定する\n    useEffect(() => {\n        const scrollArea = document.getElementById('scroll-area');\n        if (scrollArea) {\n            scrollArea.scrollTop = scrollArea.scrollHeight;\n        }\n    });\n\n    return (\n        <section className=\"c-section\">\n            <div className=\"c-box\">\n                {(Object.keys(dataset).length === 0) ? (\n                    <Loading />\n                ) : (\n                    <>\n                        <Chats chats={chats} />\n                        <AnswersList answers={answers} select={selectAnswer}/>\n                    </>\n                )}\n                <FormDialog open={open} handleOpen={handleOpen} handleClose={handleClose}/>\n            </div>\n        </section>\n    )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}