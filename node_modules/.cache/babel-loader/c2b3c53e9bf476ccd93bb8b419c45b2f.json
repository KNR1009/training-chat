{"ast":null,"code":"var _jsxFileName = \"/Users/itoukazunari/Desktop/React/training-chat/src/App.jsx\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport './assets/styles/style.css';\nimport { AnswersList, Chats } from \"./components/index\";\nimport defaultDataset from \"./dataset\"; //データベースの値をこちらでインポートする\n// クラスコンポーネントで一度作成する\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.displayNextQuestion = nextQuestionId => {\n      const initDataset = this.state.dataset[nextQuestionId];\n      const chat = {\n        text: initDataset.question,\n        type: \"question\"\n      };\n      const chats = this.state.chats;\n      chats.push(chat);\n      this.setState({\n        chats: chats\n      });\n    };\n\n    this.selectAnswer = (selectAnswer, nextQuestionId) => {\n      // 選択肢は複数あるので、switch文での記述を行う\n      switch (true) {\n        case nextQuestionId === \"init\": // initのだった場合の処理を記述する\n\n        default:\n          // クリックされた値をchatsに追加する\n          const chat = {\n            text: selectAnswer,\n            type: \"answer\"\n          };\n          const chats = this.state.chats;\n          chats.push(chat);\n          this.setState({\n            chats: chats\n          });\n      }\n    };\n\n    this.initAnswer = () => {\n      const initDataset = this.state.dataset[this.state.currentID]; //初期値のオブジェクト取得\n\n      const initAnswers = initDataset.answers; // オブジェクト配列が格納されている\n\n      this.setState({\n        answers: initAnswers\n      });\n    };\n\n    this.state = {\n      answers: [],\n      chats: [],\n      currentID: \"init\",\n      dataset: defaultDataset\n    };\n  } // 次の問題を表示するメソット\n\n\n  // 初期のチャットを入れていく\n  initChats() {\n    const initDataset = this.state.dataset[this.state.currentID];\n    const chat = {\n      text: initDataset.question,\n      type: \"question\"\n    };\n    const chats = this.state.chats;\n    chats.push(chat);\n    this.setState({\n      chats: chats\n    });\n  } // 初期の回答と質問を入力するメソットを作成する\n\n\n  // renderが走った後に呼び出されるメソット\n  componentDidMount() {\n    this.initAnswer();\n    this.initChats();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"c-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"c-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Chats, {\n      chats: this.state.chats,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(AnswersList, {\n      answers: this.state.answers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/itoukazunari/Desktop/React/training-chat/src/App.jsx"],"names":["React","useState","useEffect","useCallback","AnswersList","Chats","defaultDataset","App","Component","constructor","props","displayNextQuestion","nextQuestionId","initDataset","state","dataset","chat","text","question","type","chats","push","setState","selectAnswer","initAnswer","currentID","initAnswers","answers","initChats","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useCallback} from 'react';\nimport './App.css';\nimport './assets/styles/style.css';\nimport {AnswersList, Chats} from \"./components/index\"\nimport defaultDataset from \"./dataset\" //データベースの値をこちらでインポートする\n\n\n// クラスコンポーネントで一度作成する\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answers: [],\n      chats: [],\n      currentID: \"init\",\n      dataset: defaultDataset,\n    };\n  }\n\n  // 次の問題を表示するメソット\n  displayNextQuestion = (nextQuestionId) => {\n       const initDataset = this.state.dataset[nextQuestionId];\n       const chat = {\n         text: initDataset.question,\n         type: \"question\",\n       };\n       const chats = this.state.chats;\n       chats.push(chat);\n\n       this.setState({\n         chats: chats,\n       });\n  };\n\n  // 回答クリック時のメソット\n  selectAnswer = (selectAnswer, nextQuestionId) => {\n    // 選択肢は複数あるので、switch文での記述を行う\n    switch (true) {\n      case nextQuestionId === \"init\":\n      // initのだった場合の処理を記述する\n      default:\n        // クリックされた値をchatsに追加する\n        const chat = {\n          text: selectAnswer,\n          type: \"answer\",\n        };\n        const chats = this.state.chats;\n\n        chats.push(chat);\n        this.setState({\n          chats: chats,\n        });\n    }\n  };\n\n  // 初期のチャットを入れていく\n\n  initChats() {\n    const initDataset = this.state.dataset[this.state.currentID];\n    const chat = {\n      text: initDataset.question,\n      type: \"question\",\n    };\n    const chats = this.state.chats;\n    chats.push(chat);\n\n    this.setState({\n      chats: chats,\n    });\n  }\n\n  // 初期の回答と質問を入力するメソットを作成する\n  initAnswer = () => {\n    const initDataset = this.state.dataset[this.state.currentID]; //初期値のオブジェクト取得\n    const initAnswers = initDataset.answers; // オブジェクト配列が格納されている\n    this.setState({\n      answers: initAnswers,\n    });\n  };\n\n  // renderが走った後に呼び出されるメソット\n  componentDidMount() {\n    this.initAnswer();\n    this.initChats();\n  }\n\n  render() {\n    return (\n      <section className=\"c-section\">\n        <div className=\"c-box\">\n          <Chats chats={this.state.chats} />\n          <AnswersList answers={this.state.answers} />\n        </div>\n      </section>\n    );\n  }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}